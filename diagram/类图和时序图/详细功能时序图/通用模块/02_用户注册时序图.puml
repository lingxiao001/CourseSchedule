@startuml 用户注册时序图
title 用户注册流程时序图

actor 用户 as U
participant "注册页面" as RP
participant "AuthController" as AC
participant "AuthService" as AS
participant "UserRepository" as UR
participant "StudentRepository" as SR
participant "TeacherRepository" as TR
participant "Database" as DB
participant "邮件服务" as ES

autonumber

== 用户访问注册页面 ==
U -> RP: 填写注册信息 [用户名、密码、确认密码 真实姓名、邮箱、手机号 角色选择（学生/教师）]
RP -> RP: 前端表单验证 [检查必填字段、格式验证 密码强度、邮箱格式等]

alt 表单验证失败
    RP -> U: 显示验证错误信息 [字段格式错误或不匹配]
else 表单验证成功
    RP -> AC: POST /api/auth/register [发送注册请求 包含所有用户信息]
    AC -> AC: 参数验证 [服务端参数完整性检查]
    
    alt 参数验证失败
        AC -> RP: 400 Bad Request [参数缺失或格式错误]
        RP -> U: 显示错误信息
    else 参数验证成功
        AC -> AS: register(userInfo)
        AS -> AS: 业务规则验证 [密码强度、邮箱格式 手机号格式等业务验证]
        
        alt 业务验证失败
            AS -> AC: 抛出ValidationException
            AC -> RP: 400 Bad Request [业务规则不符合]
            RP -> U: 显示验证错误
        else 业务验证成功
            AS -> UR: findByUsername(username)
            UR -> DB: SELECT * FROM users WHERE username = ?
            DB -> UR: 返回查询结果
            UR -> AS: 返回用户查询结果
            
            alt 用户名已存在
                AS -> AC: 抛出ConflictException
                AC -> RP: 409 Conflict [用户名已被使用]
                RP -> U: 显示冲突错误
            else 用户名可用
                AS -> UR: findByEmail(email)
                UR -> DB: SELECT * FROM users WHERE email = ?
                DB -> UR: 返回查询结果
                UR -> AS: 返回邮箱查询结果
                
                alt 邮箱已存在
                    AS -> AC: 抛出ConflictException
                    AC -> RP: 409 Conflict [邮箱已被注册]
                    RP -> U: 显示冲突错误
                else 邮箱可用
                    AS -> AS: 密码加密 [BCrypt.hashpw(password)]
                    AS -> DB: 开始事务
                    AS -> UR: save(userEntity)
                    UR -> DB: INSERT INTO users (...) [保存用户基本信息]
                    
                    alt 角色为学生
                        AS -> SR: save(studentEntity)
                        SR -> DB: INSERT INTO students (...) [创建学生详细信息记录]
                    else 角色为教师  
                        AS -> TR: save(teacherEntity)
                        TR -> DB: INSERT INTO teachers (...) [创建教师详细信息记录]
                    end
                    
                    AS -> DB: 提交事务
                    AS -> AS: 生成激活码 [UUID随机码用于邮箱验证]
                    AS -> ES: 发送激活邮件
                    ES -> ES: 构建激活邮件内容 [包含激活链接和激活码]
                    ES -> U: 发送激活邮件到用户邮箱
                    
                    AS -> AS: 创建注册响应DTO [包含用户ID和注册结果]
                    AS -> AC: 返回注册成功结果
                    AC -> RP: 201 Created + 注册结果 [注册成功，待邮箱激活]
                    
                    RP -> U: 显示注册成功页面 [提示用户查收激活邮件]
                end
            end
        end
    end
end

@enduml 