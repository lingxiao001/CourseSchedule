功能名称：权限认证
功能编号：03
所属模块：通用模块

==================================================
一、功能概述
==================================================
权限认证功能负责验证用户身份和访问权限，确保只有合法用户才能访问系统资源。通过JWT令牌机制实现无状态认证，支持细粒度的权限控制。

==================================================
二、功能输入
==================================================
必需参数：
- Authorization头：Bearer {JWT令牌}
- 请求路径：用户要访问的资源路径
- HTTP方法：GET/POST/PUT/DELETE等

令牌格式：
- 头部：{
    "alg": "HS256",
    "typ": "JWT"
  }
- 载荷：{
    "userId": "用户ID",
    "username": "用户名", 
    "role": "用户角色",
    "exp": "过期时间戳",
    "iat": "签发时间戳"
  }

==================================================
三、功能输出
==================================================
认证成功：
- HTTP状态码：200/201/204（取决于业务操作）
- 安全上下文：设置当前用户信息到SecurityContext
- 业务响应：转发到目标控制器的处理结果

认证失败：
- HTTP状态码：401 Unauthorized（认证失败）
- HTTP状态码：403 Forbidden（权限不足）
- 响应内容：
  {
    "error": "认证错误类型",
    "message": "详细错误描述",
    "timestamp": "错误发生时间"
  }

==================================================
四、业务流程
==================================================
1. 用户请求访问受保护资源
2. 前端检查本地存储的JWT令牌
3. 携带Authorization头发送请求
4. 认证拦截器检查Authorization头格式
5. 使用JWT工具类验证令牌签名
6. 检查令牌是否过期
7. 解析令牌获取用户信息
8. 从数据库验证用户当前状态
9. 检查用户角色访问权限
10. 设置安全上下文
11. 转发请求到目标控制器
12. 返回业务处理结果

==================================================
五、异常处理
==================================================
1. 令牌缺失（401）
   - Authorization头不存在
   - 令牌格式错误（非Bearer格式）

2. 令牌无效（401）
   - JWT签名验证失败
   - 令牌被篡改
   - 令牌格式不正确

3. 令牌过期（401）
   - 当前时间超过exp字段
   - 令牌需要重新获取

4. 用户状态异常（401）
   - 用户账户被删除
   - 用户账户被禁用
   - 用户信息不存在

5. 权限不足（403）
   - 用户角色无访问指定资源权限
   - 资源需要更高级别权限

6. 系统异常（500）
   - 数据库连接失败
   - JWT密钥配置错误

==================================================
六、权限规则
==================================================
角色权限矩阵：

管理员（ADMIN）：
- 可访问所有管理员后台功能
- 用户管理、课程管理、排课等
- API路径：/api/admin/**

教师（TEACHER）：
- 可访问教师工作台功能
- 课表查看、教学班管理等
- API路径：/api/teacher/**

学生（STUDENT）：
- 可访问学生中心功能
- 选课、查看课表等
- API路径：/api/student/**

公共资源：
- 登录、注册、激活等
- API路径：/api/auth/**
- 无需认证访问

==================================================
七、安全要求
==================================================
1. JWT令牌安全：
   - 使用强随机密钥签名
   - 设置合理过期时间（通常2-24小时）
   - 支持令牌刷新机制
   - 敏感操作需要重新验证

2. 传输安全：
   - 使用HTTPS协议传输
   - 令牌不在URL中传递
   - 防止令牌泄露

3. 存储安全：
   - 前端使用HttpOnly Cookie或localStorage
   - 不在日志中记录完整令牌
   - 注销时清除本地令牌

4. 防重放攻击：
   - 令牌一次性使用（可选）
   - 检查请求时间戳
   - IP地址绑定（可选）

==================================================
八、性能要求
==================================================
1. 响应时间：认证过程100ms内完成
2. 缓存策略：
   - 用户信息适当缓存
   - JWT解析结果缓存
   - 权限规则缓存
3. 并发处理：支持高并发认证请求
4. 数据库优化：用户ID索引优化查询

==================================================
九、相关配置
==================================================
JWT配置：
- 密钥：jwt.secret=强随机字符串
- 过期时间：jwt.expiration=86400（秒）
- 签名算法：HS256

权限路径配置：
```
security:
  permit-all:
    - /api/auth/**
    - /api/public/**
  admin-only:
    - /api/admin/**
  teacher-only:
    - /api/teacher/**
  student-only:
    - /api/student/**
```

==================================================
十、错误码定义
==================================================
认证相关错误码：
- 40001：令牌缺失
- 40002：令牌格式错误
- 40003：令牌签名无效
- 40004：令牌已过期
- 40005：用户不存在
- 40006：用户已被禁用
- 40301：权限不足
- 40302：需要管理员权限
- 40303：需要教师权限
- 40304：需要学生权限

==================================================
十一、相关组件
==================================================
核心组件：
1. JwtAuthenticationFilter：JWT认证过滤器
2. JwtTokenUtil：JWT令牌工具类
3. SecurityConfig：Spring Security配置
4. UserDetailsService：用户详情服务
5. AuthenticationEntryPoint：认证入口点

Spring Security配置：
- 禁用CSRF（使用JWT时）
- 配置无状态会话管理
- 设置自定义认证过滤器
- 配置权限规则

==================================================
十二、令牌刷新机制
==================================================
刷新策略：
1. 令牌即将过期时自动刷新
2. 用户主动刷新令牌
3. 滑动窗口机制延长有效期

刷新接口：
地址：POST /api/auth/refresh
请求头：Authorization: Bearer {当前令牌}
响应：返回新的JWT令牌 